{"version":3,"sources":["components/Filter.js","components/Person.js","components/Persons.js","components/PersonForm.js","services/persons.js","components/SuccessNotification.js","components/ErrorNotification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleFilterChange","value","onChange","Person","person","handleRemove","name","number","onClick","id","Persons","persons","toLowerCase","includes","map","key","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","SuccessNotification","message","style","color","background","borderStyle","borderRadius","padding","marginBttom","fontSize","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","setFilter","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","event","target","preventDefault","some","window","confirm","find","p","changedPerson","returnedPerson","setTimeout","catch","error","concat","returnedPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.59ee379e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({filter, handleFilterChange}) => {\n    return (\n      <div>\n          filter shown with <input\n              value={filter}\n              onChange={handleFilterChange}/>\n      </div>\n    )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Person = ({person, handleRemove}) => {\n    return (\n        <li>{person.name}  {person.number} <button \n                onClick={() => handleRemove(person.id)}>delete</button>\n        </li>\n    )\n\n}\n\nexport default Person\n","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({persons, filter, handleRemove}) => {\n    return (\n      <ul>\n          {persons.filter(person => \n              person.name.toLowerCase().includes(filter.toLowerCase())).map(person =>\n                  <Person key={person.name}\n                          person={person}\n                          handleRemove={handleRemove}/>)}\n      </ul>\n    )\n\n}\n\nexport default Persons\n","import React from 'react'\n\nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n      <form onSubmit={addPerson}>\n        <div>\n            name: <input \n                value={newName}\n                onChange={handleNameChange}\n            />\n        </div>\n        <div>\n            number: <input \n                value={newNumber}\n                onChange={handleNumberChange}\n            />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, remove }\n","import React from 'react'\n\n\nconst SuccessNotification = ({ message}) => {\n    const successStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBttom: 10,\n        fontSize: 20\n    }\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={successStyle}>\n      {message}\n    </div>\n  )\n}\n\nexport default SuccessNotification\n","import React from 'react'\n\n\nconst ErrorNotification = ({ message}) => {\n    const errorStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBttom: 10,\n        fontSize: 20\n    }\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={errorStyle}>\n      {message}\n    </div>\n  )\n}\n\nexport default ErrorNotification\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\nimport SuccessNotification from './components/SuccessNotification'\nimport ErrorNotification from './components/ErrorNotification'\n\nconst App = () => {\n    const [ persons, setPersons] = useState([]) \n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ filter, setFilter ] = useState('')\n    const [successMessage, setSuccessMessage] = useState(null)\n    const [errorMessage, setErrorMessage] = useState(null)\n    \n    const addPerson = (event) => {\n        event.preventDefault()\n        if (persons.some(person => person.name === newName)){\n            if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n              const person = persons.find(p => p.name === newName)\n              const changedPerson = { ...person, number: newNumber }\n              const id = person.id\n                personService\n                    .update(id, changedPerson)\n                    .then(returnedPerson => {\n                        setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n                        setSuccessMessage(`Number changed for ${changedPerson.name}`)\n                        setTimeout(() => {\n                            setSuccessMessage(null)\n                        }, 5000)\n                    }).catch(error => {\n                        setErrorMessage(`Information of ${person.name} has already been removed from the sercer`)\n                            setTimeout(() => {\n                                setErrorMessage(null)\n                            }, 5000)\n                    })\n\n                \n        } \n            setNewName('')\n            setNewNumber('')\n            return\n        }\n        const personObject = {\n            name: newName,\n            number: newNumber\n        }\n        personService\n            .create(personObject)\n            .then(returnedPerson => {\n                setPersons(persons.concat(returnedPerson))\n                setNewName('')\n                setNewNumber('')\n                setSuccessMessage(`Added ${returnedPerson.name}`)\n                setTimeout(() => {\n                    setSuccessMessage(null)\n                }, 5000)\n            })\n      }\n    \n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleRemove = (id) => {\n        const person = persons.find(p => p.id === id)\n        if( window.confirm(`Delete ${person.name}?`) ){\n            personService.remove(id)\n            personService.getAll().then(\n                returnedPersons => {\n                    setPersons(returnedPersons)\n                    setSuccessMessage(`Deleted ${person.name}`)\n                    setTimeout(() => {\n                        setSuccessMessage(null)\n                    }, 5000)\n                }\n            )\n        }\n    }\n    \n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\n    }\n    useEffect(() => {\n        personService\n            .getAll().then(\n                initialPersons => {\n                    setPersons(initialPersons)\n                }\n            )\n      }, [])\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessNotification message={successMessage}/>\n      <ErrorNotification message={errorMessage}/>\n        <Filter filter={filter} handleFilterChange={handleFilterChange}/>\n      <h2>Add a new</h2>\n      <PersonForm addPerson={addPerson}\n                  newName={newName}\n                  handleNameChange={handleNameChange}\n                  newNumber={newNumber}\n                  handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} handleRemove={handleRemove}/>\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}